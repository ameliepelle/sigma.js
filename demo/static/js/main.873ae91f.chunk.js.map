{"version":3,"sources":["canvas-utils.ts","use-debounce.ts","views/GraphSettingsController.tsx","views/GraphEventsController.tsx","views/GraphDataController.tsx","views/FullScreenButton.tsx","views/Panel.tsx","views/DescriptionPanel.tsx","views/ClustersPanel.tsx","views/SearchField.tsx","views/ZoomButtons.tsx","views/GraphTitle.tsx","views/TagsPanel.tsx","views/Root.tsx","index.tsx"],"names":["TEXT_COLOR","drawLabel","context","data","settings","label","size","labelSize","font","labelFont","weight","labelWeight","width","measureText","fillStyle","fillRect","x","y","fillText","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","GraphSettingsController","children","hoveredNode","sigma","useSigma","graph","getGraph","debouncedHoveredNode","setSetting","subLabelSize","subLabel","tag","clusterLabel","beginPath","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","labelWidth","subLabelWidth","clusterLabelWidth","textWidth","Math","max","round","w","hLabel","hSubLabel","ctx","height","radius","moveTo","lineTo","quadraticCurveTo","closePath","drawRoundRect","fill","color","drawHover","getNodeDisplayData","key","hoveredColor","node","hasEdge","zIndex","image","highlighted","edge","hasExtremity","hidden","getMouseLayer","document","querySelector","GraphEventsController","setHoveredNode","registerEvents","useRegisterEvents","clickNode","getNodeAttribute","window","open","enterNode","mouseLayer","classList","add","leaveNode","remove","GraphDataController","dataset","filters","clusters","keyBy","tags","nodes","forEach","addNode","omit","cluster","process","edges","source","target","addEdge","scores","map","minDegree","min","maxDegree","forEachNode","setNodeAttribute","clear","FullScreenButton","isFullScreen","setFullScreen","containerRef","useRef","onfullscreenchange","fullscreenEnabled","ref","type","className","onClick","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","title","Panel","initiallyDeployed","isDeployed","setIsDeployed","dom","current","parentElement","scrollTo","top","offsetTop","behavior","v","duration","DescriptionPanel","rel","href","ClustersPanel","toggleCluster","setClusters","nodesPerCluster","useMemo","index","_","maxNodesPerCluster","values","visibleClustersCount","Object","keys","length","visibleNodesPerCluster","setVisibleNodesPerCluster","requestAnimationFrame","sortedClusters","sortBy","mapValues","nodesCount","visibleNodesCount","checked","onChange","id","htmlFor","style","background","borderColor","SearchField","search","setSearch","setValues","selected","setSelected","refreshValues","newValues","lcSearch","toLowerCase","attributes","indexOf","push","nodeDisplayData","getCamera","animate","ratio","placeholder","list","e","searchString","valueItem","find","onKeyPress","ZoomButtons","zoom","animatedZoom","factor","animatedUnzoom","animatedReset","prettyPercentage","val","toFixed","GraphTitle","visibleItems","setVisibleItems","forEachEdge","_2","_3","_4","order","TagsPanel","toggleTag","setTags","nodesPerTag","maxNodesPerTag","visibleTagsCount","visibleNodesPerTag","setVisibleNodesPerTag","sortedTags","Infinity","backgroundImage","Root","showContents","setShowContents","dataReady","setDataReady","setDataset","filtersState","setFiltersState","fetch","then","res","json","constant","graphOptions","initialSettings","nodeProgramClasses","getNodeProgramImage","labelRenderer","defaultNodeType","defaultEdgeType","labelDensity","labelGridCellSize","labelRenderedSizeThreshold","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.873ae91f.chunk.js","sourcesContent":["import { NodeDisplayData, PartialButFor, PlainObject } from \"sigma/types\";\nimport { Settings } from \"sigma/settings\";\n\nconst TEXT_COLOR = \"#000000\";\n\n/**\n * This function draw in the input canvas 2D context a rectangle.\n * It only deals with tracing the path, and does not fill or stroke.\n */\nexport function drawRoundRect(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number,\n): void {\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n}\n\n/**\n * Custom hover renderer\n */\nexport function drawHover(context: CanvasRenderingContext2D, data: PlainObject, settings: PlainObject) {\n  const size = settings.labelSize;\n  const font = settings.labelFont;\n  const weight = settings.labelWeight;\n  const subLabelSize = size - 2;\n\n  const label = data.label;\n  const subLabel = data.tag !== \"unknown\" ? data.tag : \"\";\n  const clusterLabel = data.clusterLabel;\n\n  // Then we draw the label background\n  context.beginPath();\n  context.fillStyle = \"#fff\";\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 2;\n  context.shadowBlur = 8;\n  context.shadowColor = \"#000\";\n\n  context.font = `${weight} ${size}px ${font}`;\n  const labelWidth = context.measureText(label).width;\n  context.font = `${weight} ${subLabelSize}px ${font}`;\n  const subLabelWidth = subLabel ? context.measureText(subLabel).width : 0;\n  context.font = `${weight} ${subLabelSize}px ${font}`;\n  const clusterLabelWidth = clusterLabel ? context.measureText(clusterLabel).width : 0;\n\n  const textWidth = Math.max(labelWidth, subLabelWidth, clusterLabelWidth);\n\n  const x = Math.round(data.x);\n  const y = Math.round(data.y);\n  const w = Math.round(textWidth + size / 2 + data.size + 3);\n  const hLabel = Math.round(size / 2 + 4);\n  const hSubLabel = subLabel ? Math.round(subLabelSize / 2 + 9) : 0;\n  const hClusterLabel = Math.round(subLabelSize / 2 + 9);\n\n  drawRoundRect(context, x, y - hSubLabel - 12, w, hClusterLabel + hLabel + hSubLabel + 12, 5);\n  context.closePath();\n  context.fill();\n\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n\n  // And finally we draw the labels\n  context.fillStyle = TEXT_COLOR;\n  context.font = `${weight} ${size}px ${font}`;\n  context.fillText(label, data.x + data.size + 3, data.y + size / 3);\n\n  if (subLabel) {\n    context.fillStyle = TEXT_COLOR;\n    context.font = `${weight} ${subLabelSize}px ${font}`;\n    context.fillText(subLabel, data.x + data.size + 3, data.y - (2 * size) / 3 - 2);\n  }\n\n  context.fillStyle = data.color;\n  context.font = `${weight} ${subLabelSize}px ${font}`;\n  context.fillText(clusterLabel, data.x + data.size + 3, data.y + size / 3 + 3 + subLabelSize);\n}\n\n/**\n * Custom label renderer\n */\nexport default function drawLabel(\n  context: CanvasRenderingContext2D,\n  data: PartialButFor<NodeDisplayData, \"x\" | \"y\" | \"size\" | \"label\" | \"color\">,\n  settings: Settings,\n): void {\n  if (!data.label) return;\n\n  const size = settings.labelSize,\n    font = settings.labelFont,\n    weight = settings.labelWeight;\n\n  context.font = `${weight} ${size}px ${font}`;\n  const width = context.measureText(data.label).width + 8;\n\n  context.fillStyle = \"#ffffffcc\";\n  context.fillRect(data.x + data.size, data.y + size / 3 - 15, width, 20);\n\n  context.fillStyle = \"#000\";\n  context.fillText(data.label, data.x + data.size + 3, data.y + size / 3);\n}\n","import { useEffect, useState } from \"react\";\n\nfunction useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        if (value !== debouncedValue) setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n","import { useSigma } from \"react-sigma-v2\";\nimport { FC, useEffect } from \"react\";\n\nimport { drawHover } from \"../canvas-utils\";\nimport useDebounce from \"../use-debounce\";\n\nconst NODE_FADE_COLOR = \"#bbb\";\nconst EDGE_FADE_COLOR = \"#eee\";\n\nconst GraphSettingsController: FC<{ hoveredNode: string | null }> = ({ children, hoveredNode }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n\n  // Here we debounce the value to avoid having too much highlights refresh when\n  // moving the mouse over the graph:\n  const debouncedHoveredNode = useDebounce(hoveredNode, 40);\n\n  /**\n   * Initialize here settings that require to know the graph and/or the sigma\n   * instance:\n   */\n  useEffect(() => {\n    sigma.setSetting(\"hoverRenderer\", (context, data, settings) =>\n      drawHover(context, { ...sigma.getNodeDisplayData(data.key), ...data }, settings),\n    );\n  }, [sigma, graph]);\n\n  /**\n   * Update node and edge reducers when a node is hovered, to highlight its\n   * neighborhood:\n   */\n  useEffect(() => {\n    const hoveredColor: string = debouncedHoveredNode ? sigma.getNodeDisplayData(debouncedHoveredNode)!.color : \"\";\n\n    sigma.setSetting(\n      \"nodeReducer\",\n      debouncedHoveredNode\n        ? (node, data) =>\n            node === debouncedHoveredNode ||\n            graph.hasEdge(node, debouncedHoveredNode) ||\n            graph.hasEdge(debouncedHoveredNode, node)\n              ? { ...data, zIndex: 1 }\n              : { ...data, zIndex: 0, label: \"\", color: NODE_FADE_COLOR, image: null, highlighted: false }\n        : null,\n    );\n    sigma.setSetting(\n      \"edgeReducer\",\n      debouncedHoveredNode\n        ? (edge, data) =>\n            graph.hasExtremity(edge, debouncedHoveredNode)\n              ? { ...data, color: hoveredColor, size: 4 }\n              : { ...data, color: EDGE_FADE_COLOR, hidden: true }\n        : null,\n    );\n  }, [debouncedHoveredNode]);\n\n  return <>{children}</>;\n};\n\nexport default GraphSettingsController;\n","import { useRegisterEvents, useSigma } from \"react-sigma-v2\";\nimport { FC, useEffect } from \"react\";\n\nfunction getMouseLayer() {\n  return document.querySelector(\".sigma-mouse\");\n}\n\nconst GraphEventsController: FC<{ setHoveredNode: (node: string | null) => void }> = ({ setHoveredNode, children }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n  const registerEvents = useRegisterEvents();\n\n  /**\n   * Initialize here settings that require to know the graph and/or the sigma\n   * instance:\n   */\n  useEffect(() => {\n    registerEvents({\n      clickNode({ node }) {\n        if (!graph.getNodeAttribute(node, \"hidden\")) {\n          window.open(graph.getNodeAttribute(node, \"URL\"), \"_blank\");\n        }\n      },\n      enterNode({ node }) {\n        setHoveredNode(node);\n        // TODO: Find a better way to get the DOM mouse layer:\n        const mouseLayer = getMouseLayer();\n        if (mouseLayer) mouseLayer.classList.add(\"mouse-pointer\");\n      },\n      leaveNode() {\n        setHoveredNode(null);\n        // TODO: Find a better way to get the DOM mouse layer:\n        const mouseLayer = getMouseLayer();\n        if (mouseLayer) mouseLayer.classList.remove(\"mouse-pointer\");\n      },\n    });\n  }, []);\n\n  return <>{children}</>;\n};\n\nexport default GraphEventsController;\n","import { useSigma } from \"react-sigma-v2\";\nimport { FC, useEffect } from \"react\";\nimport { keyBy, omit } from \"lodash\";\n\nimport { Dataset, FiltersState } from \"../types\";\n\nconst GraphDataController: FC<{ dataset: Dataset; filters: FiltersState }> = ({ dataset, filters, children }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n\n  /**\n   * Feed graphology with the new dataset:\n   */\n  useEffect(() => {\n    if (!graph || !dataset) return;\n\n    const clusters = keyBy(dataset.clusters, \"key\");\n    const tags = keyBy(dataset.tags, \"key\");\n\n    dataset.nodes.forEach((node) =>\n      graph.addNode(node.key, {\n        ...node,\n        ...omit(clusters[node.cluster], \"key\"),\n        image: `${process.env.PUBLIC_URL}/images/${tags[node.tag].image}`,\n      }),\n    );\n    dataset.edges.forEach(([source, target]) => graph.addEdge(source, target, { size: 1 }));\n\n    // Use degrees as node sizes:\n    const scores = graph.nodes().map((node) => graph.getNodeAttribute(node, \"score\"));\n    const minDegree = Math.min(...scores);\n    const maxDegree = Math.max(...scores);\n    const MIN_NODE_SIZE = 3;\n    const MAX_NODE_SIZE = 30;\n    graph.forEachNode((node) =>\n      graph.setNodeAttribute(\n        node,\n        \"size\",\n        ((graph.getNodeAttribute(node, \"score\") - minDegree) / (maxDegree - minDegree)) *\n          (MAX_NODE_SIZE - MIN_NODE_SIZE) +\n          MIN_NODE_SIZE,\n      ),\n    );\n\n    return () => graph.clear();\n  }, [graph, dataset]);\n\n  /**\n   * Apply filters to graphology:\n   */\n  useEffect(() => {\n    const { clusters, tags } = filters;\n    graph.forEachNode((node, { cluster, tag }) =>\n      graph.setNodeAttribute(node, \"hidden\", !clusters[cluster] || !tags[tag]),\n    );\n  }, [graph, filters]);\n\n  return <>{children}</>;\n};\n\nexport default GraphDataController;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { BsArrowsFullscreen, BsFullscreenExit } from \"react-icons/bs\";\n\nfunction toggleFullScreen() {\n  if (!document.fullscreenElement) {\n    document.documentElement.requestFullscreen();\n  } else {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    }\n  }\n}\n\nconst FullScreenButton: FC = () => {\n  const [isFullScreen, setFullScreen] = useState<boolean>(false);\n\n  const containerRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    document.onfullscreenchange = () => {\n      setFullScreen(!isFullScreen);\n    };\n\n    return () => {\n      document.onfullscreenchange = null;\n    };\n  }, [isFullScreen]);\n\n  if (!document.fullscreenEnabled) return null;\n\n  return (\n    <button\n      ref={containerRef}\n      type=\"button\"\n      className=\"ico\"\n      onClick={() => toggleFullScreen()}\n      title=\"Toggle fullscreen\"\n    >\n      {isFullScreen ? <BsFullscreenExit /> : <BsArrowsFullscreen />}\n    </button>\n  );\n};\n\nexport default FullScreenButton;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { MdExpandLess, MdExpandMore } from \"react-icons/md\";\nimport AnimateHeight from \"react-animate-height\";\n\nconst DURATION = 300;\n\nconst Panel: FC<{ title: JSX.Element | string; initiallyDeployed?: boolean }> = ({\n  title,\n  initiallyDeployed,\n  children,\n}) => {\n  const [isDeployed, setIsDeployed] = useState(initiallyDeployed || false);\n  const dom = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isDeployed)\n      setTimeout(() => {\n        if (dom.current) dom.current.parentElement!.scrollTo({ top: dom.current.offsetTop - 5, behavior: \"smooth\" });\n      }, DURATION);\n  }, [isDeployed]);\n\n  return (\n    <div className=\"panel\" ref={dom}>\n      <h2>\n        {title}{\" \"}\n        <button type=\"button\" onClick={() => setIsDeployed((v) => !v)}>\n          {isDeployed ? <MdExpandLess /> : <MdExpandMore />}\n        </button>\n      </h2>\n      <AnimateHeight duration={DURATION} height={isDeployed ? \"auto\" : 0}>\n        {children}\n      </AnimateHeight>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React, { FC } from \"react\";\nimport { BsInfoCircle } from \"react-icons/all\";\n\nimport Panel from \"./Panel\";\n\nconst DescriptionPanel: FC = () => {\n  return (\n    <Panel\n      initiallyDeployed\n      title={\n        <>\n          <BsInfoCircle className=\"text-muted\" /> Description\n        </>\n      }\n    >\n      <p>\n        This map represents a <i>network</i> of Wikipedia articles around the topic of \"Data vizualisation\". Each{\" \"}\n        <i>node</i> represents an article, and each edge a{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://en.wikipedia.org/wiki/See_also\">\n          \"See also\" link\n        </a>\n        .\n      </p>\n      <p>\n        The seed articles were selected by hand by the{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://medialab.sciencespo.fr/\">\n          Sciences-Po médialab\n        </a>{\" \"}\n        team, and the network was crawled using{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://densitydesign.github.io/strumentalia-seealsology/\">\n          Seealsology\n        </a>\n        , and then cleaned and enriched manually. This makes the dataset creditable to both the médialab team and{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://en.wikipedia.org/wiki/Wikipedia:Wikipedians\">\n          Wikipedia editors\n        </a>\n        .\n      </p>\n      <p>\n        This web application has been developed by{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.ouestware.com/en/\">\n          OuestWare\n        </a>\n        , using{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://reactjs.org/\">\n          react\n        </a>{\" \"}\n        and{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://www.sigmajs.org\">\n          sigma.js\n        </a>\n        . You can read the source code{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/jacomyal/sigma.js/tree/main/demo\">\n          on GitHub\n        </a>\n        .\n      </p>\n      <p>\n        Nodes sizes are related to their{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://en.wikipedia.org/wiki/Betweenness_centrality\">\n          betweenness centrality\n        </a>\n        . More central nodes (ie. bigger nodes) are important crossing points in the network. Finally, You can click a\n        node to open the related Wikipedia article.\n      </p>\n    </Panel>\n  );\n};\n\nexport default DescriptionPanel;\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { useSigma } from \"react-sigma-v2\";\nimport { sortBy, values, keyBy, mapValues } from \"lodash\";\n\nimport { Cluster, FiltersState } from \"../types\";\nimport { MdGroupWork } from \"react-icons/md\";\nimport Panel from \"./Panel\";\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\n\nconst ClustersPanel: FC<{\n  clusters: Cluster[];\n  filters: FiltersState;\n  toggleCluster: (cluster: string) => void;\n  setClusters: (clusters: Record<string, boolean>) => void;\n}> = ({ clusters, filters, toggleCluster, setClusters }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n\n  const nodesPerCluster = useMemo(() => {\n    const index: Record<string, number> = {};\n    graph.forEachNode((_, { cluster }) => (index[cluster] = (index[cluster] || 0) + 1));\n    return index;\n  }, []);\n\n  const maxNodesPerCluster = useMemo(() => Math.max(...values(nodesPerCluster)), [nodesPerCluster]);\n  const visibleClustersCount = useMemo(() => Object.keys(filters.clusters).length, [filters]);\n\n  const [visibleNodesPerCluster, setVisibleNodesPerCluster] = useState<Record<string, number>>(nodesPerCluster);\n  useEffect(() => {\n    // To ensure the graphology instance has up to data \"hidden\" values for\n    // nodes, we wait for next frame before reindexing. This won't matter in the\n    // UX, because of the visible nodes bar width transition.\n    requestAnimationFrame(() => {\n      const index: Record<string, number> = {};\n      graph.forEachNode((_, { cluster, hidden }) => !hidden && (index[cluster] = (index[cluster] || 0) + 1));\n      setVisibleNodesPerCluster(index);\n    });\n  }, [filters]);\n\n  const sortedClusters = useMemo(\n    () => sortBy(clusters, (cluster) => -nodesPerCluster[cluster.key]),\n    [clusters, nodesPerCluster],\n  );\n\n  return (\n    <Panel\n      title={\n        <>\n          <MdGroupWork className=\"text-muted\" /> Clusters\n          {visibleClustersCount < clusters.length ? (\n            <span className=\"text-muted text-small\">\n              {\" \"}\n              ({visibleClustersCount} / {clusters.length})\n            </span>\n          ) : (\n            \"\"\n          )}\n        </>\n      }\n    >\n      <p>\n        <i className=\"text-muted\">Click a cluster to show/hide related pages from the network.</i>\n      </p>\n      <p className=\"buttons\">\n        <button className=\"btn\" onClick={() => setClusters(mapValues(keyBy(clusters, \"key\"), () => true))}>\n          <AiOutlineCheckCircle /> Check all\n        </button>{\" \"}\n        <button className=\"btn\" onClick={() => setClusters({})}>\n          <AiOutlineCloseCircle /> Uncheck all\n        </button>\n      </p>\n      <ul>\n        {sortedClusters.map((cluster) => {\n          const nodesCount = nodesPerCluster[cluster.key];\n          const visibleNodesCount = visibleNodesPerCluster[cluster.key] || 0;\n          return (\n            <li\n              className=\"caption-row\"\n              key={cluster.key}\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\n              }`}\n            >\n              <input\n                type=\"checkbox\"\n                checked={filters.clusters[cluster.key] || false}\n                onChange={() => toggleCluster(cluster.key)}\n                id={`cluster-${cluster.key}`}\n              />\n              <label htmlFor={`cluster-${cluster.key}`}>\n                <span className=\"circle\" style={{ background: cluster.color, borderColor: cluster.color }} />{\" \"}\n                <div className=\"node-label\">\n                  <span>{cluster.clusterLabel}</span>\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerCluster + \"%\" }}>\n                    <div\n                      className=\"inside-bar\"\n                      style={{\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\n                      }}\n                    />\n                  </div>\n                </div>\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </Panel>\n  );\n};\n\nexport default ClustersPanel;\n","import React, { KeyboardEvent, ChangeEvent, FC, useEffect, useState } from \"react\";\nimport { useSigma } from \"react-sigma-v2\";\nimport { Attributes } from \"graphology-types\";\nimport { BsSearch } from \"react-icons/bs\";\n\nimport { FiltersState } from \"../types\";\n\n/**\n * This component is basically a fork from React-sigma-v2's SearchControl\n * component, to get some minor adjustments:\n * 1. We need to hide hidden nodes from results\n * 2. We need custom markup\n */\nconst SearchField: FC<{ filters: FiltersState }> = ({ filters }) => {\n  const sigma = useSigma();\n\n  const [search, setSearch] = useState<string>(\"\");\n  const [values, setValues] = useState<Array<{ id: string; label: string }>>([]);\n  const [selected, setSelected] = useState<string | null>(null);\n\n  const refreshValues = () => {\n    const newValues: Array<{ id: string; label: string }> = [];\n    const lcSearch = search.toLowerCase();\n    if (!selected && search.length > 1) {\n      sigma.getGraph().forEachNode((key: string, attributes: Attributes): void => {\n        if (!attributes.hidden && attributes.label && attributes.label.toLowerCase().indexOf(lcSearch) === 0)\n          newValues.push({ id: key, label: attributes.label });\n      });\n    }\n    setValues(newValues);\n  };\n\n  // Refresh values when search is updated:\n  useEffect(() => refreshValues(), [search]);\n\n  // Refresh values when filters are updated (but wait a frame first):\n  useEffect(() => {\n    requestAnimationFrame(refreshValues);\n  }, [filters]);\n\n  useEffect(() => {\n    if (!selected) return;\n\n    sigma.getGraph().setNodeAttribute(selected, \"highlighted\", true);\n    const nodeDisplayData = sigma.getNodeDisplayData(selected);\n\n    if (nodeDisplayData)\n      sigma.getCamera().animate(\n        { ...nodeDisplayData, ratio: 0.05 },\n        {\n          duration: 600,\n        },\n      );\n\n    return () => {\n      sigma.getGraph().setNodeAttribute(selected, \"highlighted\", false);\n    };\n  }, [selected]);\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const searchString = e.target.value;\n    const valueItem = values.find((value) => value.label === searchString);\n    if (valueItem) {\n      setSearch(valueItem.label);\n      setValues([]);\n      setSelected(valueItem.id);\n    } else {\n      setSelected(null);\n      setSearch(searchString);\n    }\n  };\n\n  const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" && values.length) {\n      setSearch(values[0].label);\n      setSelected(values[0].id);\n    }\n  };\n\n  return (\n    <div className=\"search-wrapper\">\n      <input\n        type=\"search\"\n        placeholder=\"Search in nodes...\"\n        list=\"nodes\"\n        value={search}\n        onChange={onInputChange}\n        onKeyPress={onKeyPress}\n      />\n      <BsSearch className=\"icon\" />\n      <datalist id=\"nodes\">\n        {values.map((value: { id: string; label: string }) => (\n          <option key={value.id} value={value.label}>\n            {value.label}\n          </option>\n        ))}\n      </datalist>\n    </div>\n  );\n};\n\nexport default SearchField;\n","import React, { FC } from \"react\";\nimport { useSigma } from \"react-sigma-v2\";\nimport { BsZoomIn, BsZoomOut } from \"react-icons/bs\";\nimport { BiRadioCircleMarked } from \"react-icons/bi\";\n\nconst ZoomButtons: FC = () => {\n  const sigma = useSigma();\n\n  function zoom(ratio?: number): void {\n    if (sigma) {\n      if (!ratio) {\n        sigma.getCamera().animatedReset({ duration: 200 });\n      } else if (ratio > 0) {\n        sigma.getCamera().animatedZoom({ duration: 200, factor: 1.5 });\n      } else if (ratio < 0) {\n        sigma.getCamera().animatedUnzoom({ duration: 200, factor: 1.5 });\n      }\n    }\n  }\n\n  return (\n    <>\n      <button type=\"button\" className=\"ico\" onClick={() => zoom(1)} title=\"Zoom In\">\n        <BsZoomIn />\n      </button>\n      <button type=\"button\" className=\"ico\" onClick={() => zoom(-1)} title=\"Zoom Out\">\n        <BsZoomOut />\n      </button>\n      <button type=\"button\" className=\"ico\" onClick={() => zoom()} title=\"See whole graph\">\n        <BiRadioCircleMarked />\n      </button>\n    </>\n  );\n};\n\nexport default ZoomButtons;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { FiltersState } from \"../types\";\nimport { useSigma } from \"react-sigma-v2\";\n\nfunction prettyPercentage(val: number): string {\n  return (val * 100).toFixed(1) + \"%\";\n}\n\nconst GraphTitle: FC<{ filters: FiltersState }> = ({ filters }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n\n  const [visibleItems, setVisibleItems] = useState<{ nodes: number; edges: number }>({ nodes: 0, edges: 0 });\n  useEffect(() => {\n    // To ensure the graphology instance has up to data \"hidden\" values for\n    // nodes, we wait for next frame before reindexing. This won't matter in the\n    // UX, because of the visible nodes bar width transition.\n    requestAnimationFrame(() => {\n      const index = { nodes: 0, edges: 0 };\n      graph.forEachNode((_, { hidden }) => !hidden && index.nodes++);\n      graph.forEachEdge((_, _2, _3, _4, source, target) => !source.hidden && !target.hidden && index.edges++);\n      setVisibleItems(index);\n    });\n  }, [filters]);\n\n  return (\n    <div className=\"graph-title\">\n      <h1>A cartography of Wikipedia pages around data visualization</h1>\n      <h2>\n        <i>\n          {graph.order} node{graph.order > 1 ? \"s\" : \"\"}{\" \"}\n          {visibleItems.nodes !== graph.order\n            ? ` (only ${prettyPercentage(visibleItems.nodes / graph.order)} visible)`\n            : \"\"}\n          , {graph.size} edge\n          {graph.size > 1 ? \"s\" : \"\"}{\" \"}\n          {visibleItems.edges !== graph.size\n            ? ` (only ${prettyPercentage(visibleItems.edges / graph.size)} visible)`\n            : \"\"}\n        </i>\n      </h2>\n    </div>\n  );\n};\n\nexport default GraphTitle;\n","import React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { MdCategory } from \"react-icons/md\";\n\nimport { FiltersState, Tag } from \"../types\";\nimport { useSigma } from \"react-sigma-v2\";\nimport { keyBy, mapValues, sortBy, values } from \"lodash\";\nimport Panel from \"./Panel\";\nimport { AiOutlineCheckCircle, AiOutlineCloseCircle } from \"react-icons/all\";\n\nconst TagsPanel: FC<{\n  tags: Tag[];\n  filters: FiltersState;\n  toggleTag: (tag: string) => void;\n  setTags: (tags: Record<string, boolean>) => void;\n}> = ({ tags, filters, toggleTag, setTags }) => {\n  const sigma = useSigma();\n  const graph = sigma.getGraph();\n\n  const nodesPerTag = useMemo(() => {\n    const index: Record<string, number> = {};\n    graph.forEachNode((_, { tag }) => (index[tag] = (index[tag] || 0) + 1));\n    return index;\n  }, []);\n\n  const maxNodesPerTag = useMemo(() => Math.max(...values(nodesPerTag)), [nodesPerTag]);\n  const visibleTagsCount = useMemo(() => Object.keys(filters.tags).length, [filters]);\n\n  const [visibleNodesPerTag, setVisibleNodesPerTag] = useState<Record<string, number>>(nodesPerTag);\n  useEffect(() => {\n    // To ensure the graphology instance has up to data \"hidden\" values for\n    // nodes, we wait for next frame before reindexing. This won't matter in the\n    // UX, because of the visible nodes bar width transition.\n    requestAnimationFrame(() => {\n      const index: Record<string, number> = {};\n      graph.forEachNode((_, { tag, hidden }) => !hidden && (index[tag] = (index[tag] || 0) + 1));\n      setVisibleNodesPerTag(index);\n    });\n  }, [filters]);\n\n  const sortedTags = useMemo(\n    () => sortBy(tags, (tag) => (tag.key === \"unknown\" ? Infinity : -nodesPerTag[tag.key])),\n    [tags, nodesPerTag],\n  );\n\n  return (\n    <Panel\n      title={\n        <>\n          <MdCategory className=\"text-muted\" /> Categories\n          {visibleTagsCount < tags.length ? (\n            <span className=\"text-muted text-small\">\n              {\" \"}\n              ({visibleTagsCount} / {tags.length})\n            </span>\n          ) : (\n            \"\"\n          )}\n        </>\n      }\n    >\n      <p>\n        <i className=\"text-muted\">Click a category to show/hide related pages from the network.</i>\n      </p>\n      <p className=\"buttons\">\n        <button className=\"btn\" onClick={() => setTags(mapValues(keyBy(tags, \"key\"), () => true))}>\n          <AiOutlineCheckCircle /> Check all\n        </button>{\" \"}\n        <button className=\"btn\" onClick={() => setTags({})}>\n          <AiOutlineCloseCircle /> Uncheck all\n        </button>\n      </p>\n      <ul>\n        {sortedTags.map((tag) => {\n          const nodesCount = nodesPerTag[tag.key];\n          const visibleNodesCount = visibleNodesPerTag[tag.key] || 0;\n          return (\n            <li\n              className=\"caption-row\"\n              key={tag.key}\n              title={`${nodesCount} page${nodesCount > 1 ? \"s\" : \"\"}${\n                visibleNodesCount !== nodesCount ? ` (only ${visibleNodesCount} visible)` : \"\"\n              }`}\n            >\n              <input\n                type=\"checkbox\"\n                checked={filters.tags[tag.key] || false}\n                onChange={() => toggleTag(tag.key)}\n                id={`tag-${tag.key}`}\n              />\n              <label htmlFor={`tag-${tag.key}`}>\n                <span\n                  className=\"circle\"\n                  style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/images/${tag.image})` }}\n                />{\" \"}\n                <div className=\"node-label\">\n                  <span>{tag.key}</span>\n                  <div className=\"bar\" style={{ width: (100 * nodesCount) / maxNodesPerTag + \"%\" }}>\n                    <div\n                      className=\"inside-bar\"\n                      style={{\n                        width: (100 * visibleNodesCount) / nodesCount + \"%\",\n                      }}\n                    />\n                  </div>\n                </div>\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </Panel>\n  );\n};\n\nexport default TagsPanel;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { SigmaContainer } from \"react-sigma-v2\";\nimport getNodeProgramImage from \"sigma/rendering/webgl/programs/node.image\";\nimport { omit, mapValues, keyBy, constant } from \"lodash\";\n\nimport GraphSettingsController from \"./GraphSettingsController\";\nimport GraphEventsController from \"./GraphEventsController\";\nimport GraphDataController from \"./GraphDataController\";\nimport FullScreenButton from \"./FullScreenButton\";\nimport DescriptionPanel from \"./DescriptionPanel\";\nimport { Dataset, FiltersState } from \"../types\";\nimport ClustersPanel from \"./ClustersPanel\";\nimport SearchField from \"./SearchField\";\nimport ZoomButtons from \"./ZoomButtons\";\nimport drawLabel from \"../canvas-utils\";\nimport GraphTitle from \"./GraphTitle\";\nimport TagsPanel from \"./TagsPanel\";\n\nimport \"react-sigma-v2/lib/react-sigma-v2.css\";\nimport { GrClose } from \"react-icons/gr\";\nimport { BiBookContent } from \"react-icons/bi\";\n\nconst Root: FC = () => {\n  const [showContents, setShowContents] = useState(false);\n  const [dataReady, setDataReady] = useState(false);\n  const [dataset, setDataset] = useState<Dataset | null>(null);\n  const [filtersState, setFiltersState] = useState<FiltersState>({\n    clusters: {},\n    tags: {},\n  });\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n\n  // Load data on mount:\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/dataset.json`)\n      .then((res) => res.json())\n      .then((dataset: Dataset) => {\n        setDataset(dataset);\n        setFiltersState({\n          clusters: mapValues(keyBy(dataset.clusters, \"key\"), constant(true)),\n          tags: mapValues(keyBy(dataset.tags, \"key\"), constant(true)),\n        });\n        requestAnimationFrame(() => setDataReady(true));\n      });\n  }, []);\n\n  if (!dataset) return null;\n\n  return (\n    <div id=\"app-root\" className={showContents ? \"show-contents\" : \"\"}>\n      <SigmaContainer\n        graphOptions={{ type: \"directed\" }}\n        initialSettings={{\n          nodeProgramClasses: { image: getNodeProgramImage() },\n          labelRenderer: drawLabel,\n          defaultNodeType: \"image\",\n          defaultEdgeType: \"arrow\",\n          labelDensity: 0.07,\n          labelGridCellSize: 60,\n          labelRenderedSizeThreshold: 15,\n          labelFont: \"Lato, sans-serif\",\n          zIndex: true,\n        }}\n        className=\"react-sigma\"\n      >\n        <GraphSettingsController hoveredNode={hoveredNode} />\n        <GraphEventsController setHoveredNode={setHoveredNode} />\n        <GraphDataController dataset={dataset} filters={filtersState} />\n\n        {dataReady && (\n          <>\n            <div className=\"controls\">\n              <button\n                type=\"button\"\n                className=\"ico show-contents\"\n                onClick={() => setShowContents(true)}\n                title=\"Show caption and description\"\n              >\n                <BiBookContent />\n              </button>\n              <FullScreenButton />\n              <ZoomButtons />\n            </div>\n            <div className=\"contents\">\n              <button\n                type=\"button\"\n                className=\"ico hide-contents\"\n                onClick={() => setShowContents(false)}\n                title=\"Show caption and description\"\n              >\n                <GrClose />\n              </button>\n              <GraphTitle filters={filtersState} />\n              <div className=\"panels\">\n                <SearchField filters={filtersState} />\n                <DescriptionPanel />\n                <ClustersPanel\n                  clusters={dataset.clusters}\n                  filters={filtersState}\n                  setClusters={(clusters) =>\n                    setFiltersState((filters) => ({\n                      ...filters,\n                      clusters,\n                    }))\n                  }\n                  toggleCluster={(cluster) => {\n                    setFiltersState((filters) => ({\n                      ...filters,\n                      clusters: filters.clusters[cluster]\n                        ? omit(filters.clusters, cluster)\n                        : { ...filters.clusters, [cluster]: true },\n                    }));\n                  }}\n                />\n                <TagsPanel\n                  tags={dataset.tags}\n                  filters={filtersState}\n                  setTags={(tags) =>\n                    setFiltersState((filters) => ({\n                      ...filters,\n                      tags,\n                    }))\n                  }\n                  toggleTag={(tag) => {\n                    setFiltersState((filters) => ({\n                      ...filters,\n                      tags: filters.tags[tag] ? omit(filters.tags, tag) : { ...filters.tags, [tag]: true },\n                    }));\n                  }}\n                />\n              </div>\n            </div>\n          </>\n        )}\n      </SigmaContainer>\n    </div>\n  );\n};\n\nexport default Root;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport Root from \"./views/Root\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}